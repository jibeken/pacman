–ß—Ç–æ —Ç–∞–∫–æ–µ Grid (–°–µ—Ç–∫–∞) –≤ Pacman?
Grid ‚Äî —ç—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∏—Ç –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ (–∫–ª–µ—Ç–∫–∏). –í Pacman –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã (—Å—Ç–µ–Ω—ã, —Ç–æ—á–∫–∏, –ü–∞–∫–º–∞–Ω, –ø—Ä–∏–∑—Ä–∞–∫–∏) –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —ç—Ç–æ–π —Å–µ—Ç–∫–µ –∏ –¥–≤–∏–≥–∞—é—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –ø–æ –µ—ë –ª–∏–Ω–∏—è–º.

üî∑ –ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω Grid –≤ –≤–∞—à–µ–º –∫–æ–¥–µ?
–ò–∑ –≤–∞—à–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞:

python
layout = LEVEL_LAYOUTS[level_index]          # –ë–µ—Ä—ë–º —Å—Ö–µ–º—É —É—Ä–æ–≤–Ω—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫)
cell_width = SCREEN_WIDTH // len(layout[0])  # –®–∏—Ä–∏–Ω–∞ 1 –∫–ª–µ—Ç–∫–∏
cell_height = SCREEN_HEIGHT // len(layout)   # –í—ã—Å–æ—Ç–∞ 1 –∫–ª–µ—Ç–∫–∏
LEVEL_LAYOUTS ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π, –≥–¥–µ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["#####", "#...#", "#####"]).

–°–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, #, ., P) –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –æ–±—ä–µ–∫—Ç—ã:

# ‚Äî —Å—Ç–µ–Ω–∞

. ‚Äî —Ç–æ—á–∫–∞

P ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –ü–∞–∫–º–∞–Ω–∞

üî∑ –ü—Ä–∏–º–µ—Ä Grid –¥–ª—è Pacman
–î–æ–ø—É—Å—Ç–∏–º, —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –∑–∞–¥–∞–Ω —Ç–∞–∫:

python
LEVEL_LAYOUTS = [
    [
        "#######",
        "#.....#",
        "#.###.#",
        "#.# #.#",
        "#######"
    ]
]
–≠—Ç–æ —Å–æ–∑–¥–∞—ë—Ç —Å–µ—Ç–∫—É 7x5 (7 –∫–ª–µ—Ç–æ–∫ –≤ —à–∏—Ä–∏–Ω—É, 5 –≤ –≤—ã—Å–æ—Ç—É):

#######
#.....#
#.###.#
#.# #.#
#######
–ö–∞–∂–¥–∞—è # ‚Äî —Å—Ç–µ–Ω–∞ (–∑–∞–Ω–∏–º–∞–µ—Ç 1 –∫–ª–µ—Ç–∫—É).

–ö–∞–∂–¥–∞—è . ‚Äî —Ç–æ—á–∫–∞ (—Ç–∞–∫–∂–µ 1 –∫–ª–µ—Ç–∫—É).

üî∑ –ö–∞–∫ Grid –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–≥—Ä–µ?
–†–∞–∑–º–µ—Ä—ã –∫–ª–µ—Ç–æ–∫

–ï—Å–ª–∏ SCREEN_WIDTH = 700, –∞ –≤ —É—Ä–æ–≤–Ω–µ 7 —Å—Ç–æ–ª–±—Ü–æ–≤, —Ç–æ:

python
cell_width = 700 // 7 = 100  # –®–∏—Ä–∏–Ω–∞ –∫–ª–µ—Ç–∫–∏ = 100 –ø–∏–∫—Å–µ–ª–µ–π
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–æ–≤ –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä–∞ –∫–ª–µ—Ç–æ–∫:

python
x = column_index * cell_width  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
y = row_index * cell_height    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
–î–≤–∏–∂–µ–Ω–∏–µ –ü–∞–∫–º–∞–Ω–∞ –∏ –ø—Ä–∏–∑—Ä–∞–∫–æ–≤

–û–Ω–∏ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è –Ω–∞ 1 –∫–ª–µ—Ç–∫—É –∑–∞ —à–∞–≥, –∞ –Ω–µ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ.

–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å–æ —Å—Ç–µ–Ω–∞–º–∏:

python
new_x = pacman.x + pacman.speed
new_col = new_x // cell_width  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–∏–∫—Å–µ–ª–∏ –≤ –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏
if layout[row][new_col] == "#":
    # –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–æ —Å—Ç–µ–Ω–æ–π!
–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –∏ —Å—Ç–µ–Ω

–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ layout –∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã –≤ —Ü–µ–Ω—Ç—Ä—ã –∫–ª–µ—Ç–æ–∫:

python
for row in range(len(layout)):
    for col in range(len(layout[row])):
        if layout[row][col] == ".":
            dot = Dot(col * cell_width + cell_width//2, 
                     row * cell_height + cell_height//2)
            self.dots.append(dot)
üî∑ –ó–∞—á–µ–º Grid –≤ Pacman?
–ü—Ä–æ—Å—Ç–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–î–≤–∏–∂–µ–Ω–∏–µ ¬´–ø–æ –∫–ª–µ—Ç–∫–∞–º¬ª –¥–µ–ª–∞–µ—Ç –∏–≥—Ä—É –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–π (–∫–∞–∫ –≤ —à–∞—Ö–º–∞—Ç–∞—Ö).

–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–∏–∑–∏–π

–ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å —Å–µ—Ç–∫–æ–π –ø—Ä–æ—â–µ, —á–µ–º —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏.

–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π

–£—Ä–æ–≤–Ω–∏ –ª–µ–≥–∫–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã.

üî∑ –ö–∞–∫ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Grid?
–î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å–µ—Ç–∫—É:

python
# –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
for x in range(0, SCREEN_WIDTH, cell_width):
    pygame.draw.line(screen, (50, 50, 50), (x, 0), (x, SCREEN_HEIGHT))
for y in range(0, SCREEN_HEIGHT, cell_height):
    pygame.draw.line(screen, (50, 50, 50), (0, y), (SCREEN_WIDTH, y))
–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–≤–∏–¥–µ—Ç—å, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –æ–±—ä–µ–∫—Ç—ã.



import math
import pygame
import random
import sys

pygame.init()
pygame.mixer.init()
pygame.mixer_music.load("pac-man-1.mp3")
pygame.mixer_music.play(1)

while pygame.mixer.music.get_busy():
    pygame.time.Clock().tick(10)

pygame.mixer_music.load("pac-man-2.mp3")
pygame.mixer_music.play(2)

SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
TILE_SIZE = 40
PACMAN_SPEED = 3
GHOST_SPEED = 2
DOT_SIZE = 8
SCORE_PER_DOT = 10

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
YELLOW = (255, 255, 0)
RED = (255, 0, 0)
PINK = (255, 192, 203)
CYAN = (0, 255, 255)
ORANGE = (255, 165, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
WALL_COLOR = (33, 33, 222)

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Pac-Man")
clock = pygame.time.Clock()

MENU = 0
PLAYING = 1
GAME_OVER = 2
WIN = 3
LEVEL_COMPLETE = 4

LEVEL_LAYOUTS = [

    [
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],
        [1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1],
        [1, 3, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 3, 1],
        [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],
        [1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1],
        [1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1],
        [1, 1, 1, 1, 2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 2, 1, 1, 1, 1],
        [0, 0, 0, 1, 2, 1, 0, 0, 0, 5, 6, 0, 0, 0, 1, 2, 1, 0, 0, 0],
        [1, 1, 1, 1, 2, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 2, 1, 1, 1, 1],
        [0, 0, 0, 0, 2, 0, 0, 1, 7, 8, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0],
        [1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1],
        [0, 0, 0, 1, 2, 1, 0, 0, 0, 4, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0],
        [1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1],
        [1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],
        [1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1],
        [1, 3, 2, 1, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 1, 2, 3, 1],
        [1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1],
        [1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    ],
    # Level 2
    [
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],
        [1, 3, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 3, 1],
        [1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1],
        [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],
        [1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1],
        [1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1],
        [1, 1, 1, 1, 2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 2, 1, 1, 1, 1],
        [1, 0, 0, 1, 2, 1, 0, 0, 0, 5, 6, 0, 0, 0, 1, 2, 1, 0, 0, 1],
        [1, 0, 0, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 0, 0, 1],
        [1, 0, 0, 1, 2, 0, 0, 1, 7, 8, 0, 0, 1, 0, 0, 2, 1, 0, 0, 1],
        [1, 0, 0, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 0, 0, 1],
        [1, 0, 0, 1, 2, 1, 0, 0, 0, 4, 0, 0, 0, 0, 1, 2, 1, 0, 0, 1],
        [1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1],
        [1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],
        [1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1],
        [1, 3, 2, 1, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 1, 2, 3, 1],
        [1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1],
        [1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    ],
    # Level 3
    [
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 3, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 1],
        [1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1],
        [1, 2, 1, 0, 0, 0, 0, 1, 2, 1, 1, 2, 1, 0, 0, 0, 0, 1, 2, 1],
        [1, 2, 1, 0, 1, 1, 0, 1, 2, 1, 1, 2, 1, 0, 1, 1, 0, 1, 2, 1],
        [1, 2, 1, 0, 1, 1, 0, 1, 2, 2, 2, 2, 1, 0, 1, 1, 0, 1, 2, 1],
        [1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1],
        [1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1],
        [1, 2, 2, 2, 2, 2, 2, 2, 2, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 1],
        [1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1],
        [0, 0, 0, 1, 2, 1, 7, 0, 0, 8, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0],
        [1, 1, 1, 1, 2, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1],
        [1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],
        [1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1],
        [1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1],
        [1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1],
        [1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 2, 1],
        [1, 3, 1, 1, 1, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 3, 1],
        [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    ]
]


class Wall:
    def __init__(self, x, y, width, height):
        self.rect = pygame.Rect(x, y, width, height)

    def draw(self):
        pygame.draw.rect(screen, WALL_COLOR, self.rect)


class PacMan:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.radius = 15
        self.direction = "right"
        self.next_direction = None
        self.speed = PACMAN_SPEED
        self.animation_frame = 0
        self.animation_speed = 0.2  # –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
        self.mouth_open = True


        self.image_open = pygame.image.load('pacman.png').convert_alpha()
        self.image_closed = pygame.image.load('pacman_closed.png').convert_alpha()


        self.image_open = pygame.transform.scale(self.image_open, (30, 30))
        self.image_closed = pygame.transform.scale(self.image_closed, (30, 30))


        self.original_open = self.image_open.copy()
        self.original_closed = self.image_closed.copy()

        self.smooth_rotation = 0
        self.rotation_speed = 5

    def update(self, walls):

        self.animation_frame += self.animation_speed
        if self.animation_frame >= 2:  # 0-1 = –æ—Ç–∫—Ä—ã—Ç, 1-2 = –∑–∞–∫—Ä—ã—Ç
            self.animation_frame = 0

        self.mouth_open = self.animation_frame < 1


        target_rotation = {
            "right": 0,
            "left": 180,
            "up": 90,
            "down": 270
        }.get(self.direction, 0)

        if abs(self.smooth_rotation - target_rotation) > 180:
            if self.smooth_rotation < target_rotation:
                self.smooth_rotation += 360
            else:
                self.smooth_rotation -= 360

        self.smooth_rotation += (target_rotation - self.smooth_rotation) * 0.2


        old_x, old_y = self.x, self.y

        if self.next_direction and self.next_direction != self.direction:
            test_x, test_y = self.x, self.y
            if self.next_direction == "right":
                test_x += self.speed
            elif self.next_direction == "left":
                test_x -= self.speed
            elif self.next_direction == "up":
                test_y -= self.speed
            elif self.next_direction == "down":
                test_y += self.speed

            test_rect = self.get_rect_at(test_x, test_y)
            can_turn = True
            for wall in walls:
                if test_rect.colliderect(wall.rect):
                    can_turn = False
                    break

            if can_turn:
                self.direction = self.next_direction

        if self.direction == "right":
            self.x += self.speed
        elif self.direction == "left":
            self.x -= self.speed
        elif self.direction == "up":
            self.y -= self.speed
        elif self.direction == "down":
            self.y += self.speed

        pacman_rect = self.get_rect()
        collision = False
        for wall in walls:
            if pacman_rect.colliderect(wall.rect):
                collision = True
                break

        if collision:
            self.x, self.y = old_x, old_y
            self.direction = self.get_valid_direction(walls)
            self.next_direction = None

        if self.x < 0:
            self.x = SCREEN_WIDTH
        elif self.x > SCREEN_WIDTH:
            self.x = 0
        if self.y < 0:
            self.y = SCREEN_HEIGHT
        elif self.y > SCREEN_HEIGHT:
            self.y = 0

    def draw(self):

        if self.mouth_open:
            base_image = self.original_open
        else:
            base_image = self.original_closed


        rotated_image = pygame.transform.rotate(base_image, self.smooth_rotation)
        rect = rotated_image.get_rect(center=(self.x, self.y))
        screen.blit(rotated_image, rect.topleft)

    def get_rect(self):
        return pygame.Rect(self.x - self.radius, self.y - self.radius,
                           self.radius * 2, self.radius * 2)

    def get_rect_at(self, x, y):
        return pygame.Rect(x - self.radius, y - self.radius,
                           self.radius * 2, self.radius * 2)

    def get_valid_direction(self, walls):
        directions = ["right", "left", "up", "down"]
        for dir in directions:
            test_x, test_y = self.x, self.y
            if dir == "right":
                test_x += self.speed
            elif dir == "left":
                test_x -= self.speed
            elif dir == "up":
                test_y -= self.speed
            elif dir == "down":
                test_y += self.speed

            test_rect = self.get_rect_at(test_x, test_y)
            collision = False
            for wall in walls:
                if test_rect.colliderect(wall.rect):
                    collision = True
                    break

            if not collision:
                return dir

        return self.direction

class Ghost:
    def __init__(self, x, y, color):
        self.x = x
        self.y = y
        self.color = color
        self.radius = 15
        self.direction = random.choice(["right", "left", "up", "down"])
        self.speed = GHOST_SPEED
        self.change_direction_counter = 0

        self.image = pygame.image.load('ghost.webp')
        self.image = pygame.transform.scale(self.image, (30, 30))

    def update(self, pacman, walls):
        self.change_direction_counter += 1
        if self.change_direction_counter >= 60:
            if random.random() < 0.7:
                dx = pacman.x - self.x
                dy = pacman.y - self.y

                if abs(dx) > abs(dy):
                    self.direction = "right" if dx > 0 else "left"
                else:
                    self.direction = "down" if dy > 0 else "up"
            else:
                self.direction = random.choice(["right", "left", "up", "down"])

            self.change_direction_counter = 0


        old_x, old_y = self.x, self.y

        if self.direction == "right":
            self.x += self.speed
        elif self.direction == "left":
            self.x -= self.speed
        elif self.direction == "up":
            self.y -= self.speed
        elif self.direction == "down":
            self.y += self.speed

        ghost_rect = self.get_rect()
        for wall in walls:
            if ghost_rect.colliderect(wall.rect):
                self.x, self.y = old_x, old_y
                self.direction = random.choice(["right", "left", "up", "down"])
                break

        if self.x < 0:
            self.x = SCREEN_WIDTH
        elif self.x > SCREEN_WIDTH:
            self.x = 0
        if self.y < 0:
            self.y = SCREEN_HEIGHT
        elif self.y > SCREEN_HEIGHT:
            self.y = 0

    def draw(self):
        screen.blit(self.image, (self.x - 15, self.y - 15))

    def get_rect(self):
        return pygame.Rect(self.x - self.radius, self.y - self.radius, self.radius * 2, self.radius * 2)

class PowerPellet:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.radius = DOT_SIZE
        self.collected = False
        self.animation_counter = 0

    def update(self):
        self.animation_counter += 1
        if self.animation_counter >= 30:
            self.animation_counter = 0

    def draw(self):
        if not self.collected:

            size_mod = abs(math.sin(self.animation_counter * 0.1)) * 2
            pygame.draw.circle(screen, WHITE, (self.x, self.y), self.radius + size_mod)

    def get_rect(self):
        return pygame.Rect(self.x - self.radius, self.y - self.radius, self.radius * 2, self.radius * 2)


class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.radius = DOT_SIZE // 2
        self.collected = False

        self.image = pygame.image.load('dot.png')
        self.image = pygame.transform.scale(self.image, (DOT_SIZE, DOT_SIZE))

    def draw(self):
        if not self.collected:
            screen.blit(self.image, (self.x - self.radius, self.y - self.radius))

    def get_rect(self):
        return pygame.Rect(self.x - self.radius, self.y - self.radius, self.radius * 2, self.radius * 2)


class Game:
    def __init__(self):
        self.reset()

    def reset(self):
        self.state = MENU
        self.level = 0
        self.pacman = None
        self.ghosts = []
        self.dots = []
        self.power_pellets = []
        self.walls = []
        self.score = 0
        self.lives = 3
        self.load_level(self.level)

    def load_level(self, level_index):
        if level_index >= len(LEVEL_LAYOUTS):
            self.state = WIN
            return

        self.dots = []
        self.power_pellets = []
        self.walls = []
        self.ghosts = []

        layout = LEVEL_LAYOUTS[level_index]
        cell_width = SCREEN_WIDTH // len(layout[0])
        cell_height = SCREEN_HEIGHT // len(layout)

        pacman_pos = None
        ghost_positions = []

        for y, row in enumerate(layout):
            for x, cell in enumerate(row):
                cell_x = x * cell_width + cell_width // 2
                cell_y = y * cell_height + cell_height // 2

                if cell == 1:  # Wall
                    self.walls.append(Wall(x * cell_width, y * cell_height, cell_width, cell_height))
                elif cell == 2:  # Dot
                    self.dots.append(Dot(cell_x, cell_y))
                elif cell == 3:  # Power Pellet
                    self.power_pellets.append(PowerPellet(cell_x, cell_y))
                elif cell == 4:  #pacman start
                    pacman_pos = (cell_x, cell_y)
                elif cell >= 5 and cell <= 8:  # Ghost starts
                    ghost_positions.append((cell_x, cell_y, cell - 5))

        
        if pacman_pos:
            self.pacman = PacMan(pacman_pos[0], pacman_pos[1])
        else:
            self.pacman = PacMan(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)

        # Create Ghosts
        ghost_colors = [RED, PINK, CYAN, ORANGE]
        for pos in ghost_positions:
            self.ghosts.append(Ghost(pos[0], pos[1], ghost_colors[pos[2]]))

        # If no ghosts defined in the layout, create default ones
        if not self.ghosts:
            self.ghosts = [
                Ghost(100, 100, RED),
                Ghost(SCREEN_WIDTH - 100, 100, PINK),
                Ghost(100, SCREEN_HEIGHT - 100, CYAN),
                Ghost(SCREEN_WIDTH - 100, SCREEN_HEIGHT - 100, ORANGE)
            ]

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame.KEYDOWN:
                if self.state == MENU:
                    if event.key == pygame.K_SPACE:
                        self.state = PLAYING
                elif self.state == GAME_OVER or self.state == WIN:
                    if event.key == pygame.K_SPACE:
                        self.reset()
                elif self.state == LEVEL_COMPLETE:
                    if event.key == pygame.K_SPACE:
                        self.level += 1
                        self.load_level(self.level)
                        self.state = PLAYING
                elif self.state == PLAYING:
                    if event.key == pygame.K_RIGHT:
                        self.pacman.next_direction = "right"
                    elif event.key == pygame.K_LEFT:
                        self.pacman.next_direction = "left"
                    elif event.key == pygame.K_UP:
                        self.pacman.next_direction = "up"
                    elif event.key == pygame.K_DOWN:
                        self.pacman.next_direction = "down"

    def update(self):
        if self.state == PLAYING:
            self.pacman.update(self.walls)

            for ghost in self.ghosts:
                ghost.update(self.pacman, self.walls)

                if self.pacman.get_rect().colliderect(ghost.get_rect()):
                    self.lives -= 1
                    if self.lives <= 0:
                        self.state = GAME_OVER
                    else:
                        # Reset positions but keep the level
                        self.load_level(self.level)
                        break

            for dot in self.dots:
                if not dot.collected and self.pacman.get_rect().colliderect(dot.get_rect()):
                    dot.collected = True
                    self.score += SCORE_PER_DOT

            for pellet in self.power_pellets:
                if not pellet.collected and self.pacman.get_rect().colliderect(pellet.get_rect()):
                    pellet.collected = True
                    self.score += SCORE_PER_DOT * 5
                    # TODO: Make ghosts vulnerable

            # Check if all dots and power pellets are collected
            if all(dot.collected for dot in self.dots) and all(pellet.collected for pellet in self.power_pellets):
                if self.level < len(LEVEL_LAYOUTS) - 1:
                    self.state = LEVEL_COMPLETE
                else:
                    self.state = WIN

    def draw(self):
        screen.fill(BLACK)

        if self.state == MENU:
            font = pygame.font.SysFont(None, 72)
            title = font.render("PAC-MAN", True, YELLOW)
            screen.blit(title, (SCREEN_WIDTH // 2 - title.get_width() // 2, SCREEN_HEIGHT // 3))

            font = pygame.font.SysFont(None, 36)
            instruction = font.render("Press SPACE to start", True, WHITE)
            screen.blit(instruction, (SCREEN_WIDTH // 2 - instruction.get_width() // 2, SCREEN_HEIGHT // 2))

        elif self.state == PLAYING or self.state == GAME_OVER or self.state == LEVEL_COMPLETE or self.state == WIN:
            # Draw walls
            for wall in self.walls:
                wall.draw()

            # Draw dots
            for dot in self.dots:
                dot.draw()

            # Draw power pellets
            for pellet in self.power_pellets:
                pellet.update()
                pellet.draw()

            self.pacman.draw()

            for ghost in self.ghosts:
                ghost.draw()

            font = pygame.font.SysFont(None, 36)
            score_text = font.render(f"Score: {self.score}", True, WHITE)
            screen.blit(score_text, (10, 10))

            lives_text = font.render(f"Lives: {self.lives}", True, WHITE)
            screen.blit(lives_text, (SCREEN_WIDTH - lives_text.get_width() - 10, 10))

            level_text = font.render(f"Level: {self.level + 1}", True, WHITE)
            screen.blit(level_text, (SCREEN_WIDTH // 2 - level_text.get_width() // 2, 10))

            if self.state == GAME_OVER:
                overlay = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.SRCALPHA)
                overlay.fill((0, 0, 0, 128))
                screen.blit(overlay, (0, 0))

                font = pygame.font.SysFont(None, 72)
                game_over = font.render("GAME OVER", True, RED)
                screen.blit(game_over, (SCREEN_WIDTH // 2 - game_over.get_width() // 2, SCREEN_HEIGHT // 3))

                font = pygame.font.SysFont(None, 48)
                final_score = font.render(f"Final Score: {self.score}", True, WHITE)
                screen.blit(final_score, (SCREEN_WIDTH // 2 - final_score.get_width() // 2, SCREEN_HEIGHT // 2))

                font = pygame.font.SysFont(None, 36)
                restart = font.render("Press SPACE to restart", True, WHITE)
                screen.blit(restart, (SCREEN_WIDTH // 2 - restart.get_width() // 2, SCREEN_HEIGHT // 2 + 60))

            elif self.state == WIN:
                overlay = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.SRCALPHA)
                overlay.fill((0, 0, 0, 128))
                screen.blit(overlay, (0, 0))

                font = pygame.font.SysFont(None, 72)
                win_text = font.render("YOU WIN!", True, GREEN)
                screen.blit(win_text, (SCREEN_WIDTH // 2 - win_text.get_width() // 2, SCREEN_HEIGHT // 3))

                font = pygame.font.SysFont(None, 48)
                final_score = font.render(f"Final Score: {self.score}", True, WHITE)
                screen.blit(final_score, (SCREEN_WIDTH // 2 - final_score.get_width() // 2, SCREEN_HEIGHT // 2))

                font = pygame.font.SysFont(None, 36)
                restart = font.render("Press SPACE to restart", True, WHITE)
                screen.blit(restart, (SCREEN_WIDTH // 2 - restart.get_width() // 2, SCREEN_HEIGHT // 2 + 60))

            elif self.state == LEVEL_COMPLETE:
                overlay = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.SRCALPHA)
                overlay.fill((0, 0, 0, 128))
                screen.blit(overlay, (0, 0))

                font = pygame.font.SysFont(None, 72)
                level_complete = font.render(f"LEVEL {self.level + 1} COMPLETE!", True, GREEN)
                screen.blit(level_complete, (SCREEN_WIDTH // 2 - level_complete.get_width() // 2, SCREEN_HEIGHT // 3))

                font = pygame.font.SysFont(None, 48)
                current_score = font.render(f"Score: {self.score}", True, WHITE)
                screen.blit(current_score, (SCREEN_WIDTH // 2 - current_score.get_width() // 2, SCREEN_HEIGHT // 2))

                font = pygame.font.SysFont(None, 36)
                next_level = font.render("Press SPACE for next level", True, WHITE)
                screen.blit(next_level, (SCREEN_WIDTH // 2 - next_level.get_width() // 2, SCREEN_HEIGHT // 2 + 60))

        pygame.display.flip()


def main():
    # Add missing import


    game = Game()

    running = True
    while running:
        game.handle_events()
        game.update()
        game.draw()
        clock.tick(60)


if __name__ == "__main__":
    main()
    pygame.mixer.quit()
    pygame.quit()

–æ–±—ä—è—Å–Ω–∏ –í–ï–°–¨ –ö–û–î, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ –∑–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—É—Ç, –æ–±—ä—è—Å–Ω–∏ –µ–≥–æ –≤–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º
